= (StartDate as date, EndDate as date, FYStartMonth as number) as table =>
  let
    DayCount = Duration.Days(Duration.From(EndDate - StartDate)),
    Source = List.Dates(StartDate,DayCount,#duration(1,0,0,0)),
    TableFromList = Table.FromList(Source, Splitter.SplitByNothing()),   
    ChangedType = Table.TransformColumnTypes(TableFromList,{{"Column1", type date}}),
    RenamedColumns = Table.RenameColumns(ChangedType,{{"Column1", "Date"}}),
    InsertYear = Table.AddColumn(RenamedColumns, "Year", each Date.Year([Date]),type text),
    InsertYearNumber = Table.AddColumn(RenamedColumns, "YearNumber", each Date.Year([Date])),
    InsertQuarter = Table.AddColumn(InsertYear, "QuarterOfYear", each Date.QuarterOfYear([Date])),
    InsertMonth = Table.AddColumn(InsertQuarter, "MonthOfYear", each Date.Month([Date]), type text),
    InsertDay = Table.AddColumn(InsertMonth, "DayOfMonth", each Date.Day([Date])),
    InsertDayInt = Table.AddColumn(InsertDay, "DateInt", each [Year] * 10000 + [MonthOfYear] * 100 + [DayOfMonth]),
    InsertMonthName = Table.AddColumn(InsertDayInt, "MonthName", each Date.ToText([Date], "MMMM"), type text),
    InsertCalendarMonth = Table.AddColumn(InsertMonthName, "MonthInCalendar", each (try(Text.Range([MonthName],0,3)) otherwise [MonthName]) & " " & Number.ToText([Year])),
    InsertCalendarQtr = Table.AddColumn(InsertCalendarMonth, "QuarterInCalendar", each "Q" & Number.ToText([QuarterOfYear]) & " " & Number.ToText([Year])),
    InsertDayWeek = Table.AddColumn(InsertCalendarQtr, "DayInWeek", each Date.DayOfWeek([Date])),
    InsertDayName = Table.AddColumn(InsertDayWeek, "DayOfWeekName", each Date.ToText([Date], "dddd"), type text),
    InsertDayType = Table.AddColumn(InsertDayName, "Day Type", each if [DayInWeek] = 0 then "Weekend" else if [DayInWeek] = 6 then "Weekend" else "Weekday"),
    InsertMonth3 = Table.AddColumn(InsertDayType, "ShortMonth", each Text.BeforeDelimiter([MonthInCalendar], " "), type text),
    InsertQuarterQ = Table.AddColumn(InsertMonth3, "ShortQuarter", each Text.BeforeDelimiter([QuarterInCalendar], " "), type text),
    InsertWeekEnding = Table.AddColumn(InsertQuarterQ, "WeekEnding", each Date.EndOfWeek([Date]), type date),
    InsertWeekNumber= Table.AddColumn(InsertWeekEnding, "Week Number", each Date.WeekOfYear([Date])),
    InsertMonthnYear = Table.AddColumn(InsertWeekNumber,"MonthnYear", each [Year] * 10000 + [MonthOfYear] * 100),
	InsertDatep = Table.AddColumn(InsertMonthnYear, "Date'", each (if [Date]<=DateTime.Date(DateTime.LocalNow()) then [Date] else null)),
	InsertUntilToday = Table.AddColumn(InsertDatep, "Until today", each ( if [Date]<=DateTime.Date(DateTime.LocalNow()) then 1 else 0)),
	InsertTrailing12Months = Table.AddColumn(InsertUntilToday ,"Trailing 12 Months", each (if ([Date]<=DateTime.Date(DateTime.LocalNow())) and (Duration.Days(DateTime.Date(DateTime.LocalNow())-[Date])<365) then 1 else 0)),
	InsertWeekEndingn = Table.AddColumn(InsertTrailing12Months, "Week Ending", each (try(Date.AddDays([#"Date'"],6-Date.DayOfWeek([#"Date'"],Day.Monday))) otherwise null)),
    InsertWeekEndingp = Table.AddColumn(InsertWeekEndingn, "Week Ending'", each (try (Date.ToText([#"Week Ending"], "ddd, MM/dd/yyyy")) otherwise null)),
	InsertWeekEndSun = Table.AddColumn(InsertWeekEndingp, "WeekEndSun", each (try(if([Week Ending]=Date.AddDays(DateTime.Date(DateTime.LocalNow()),6-Date.DayOfWeek(DateTime.Date(DateTime.LocalNow()),Day.Monday))) then "Recent Week Ending" else [#"Week Ending'"]) otherwise null)),
	InsertQuarternYear = Table.AddColumn(InsertWeekEndSun,"QuarternYear", each [Year] * 10000 + [QuarterOfYear] * 100),
    ChangedType1 = Table.TransformColumnTypes(InsertQuarternYear,{{"Date'", type date},{"Trailing 12 Months", Int64.Type},{"Until today", Int64.Type},{"Week Ending", type date},{"Week Ending'", type text},{"WeekEndSun", type text},{"QuarternYear", Int64.Type},{"Week Number", Int64.Type},{"Year", type text},{"MonthnYear", Int64.Type}, {"DateInt", Int64.Type}, {"DayOfMonth", Int64.Type}, {"MonthOfYear", Int64.Type}, {"QuarterOfYear", Int64.Type}, {"MonthInCalendar", type text}, {"QuarterInCalendar", type text}, {"DayInWeek", Int64.Type}}),
    InsertShortYear = Table.AddColumn(ChangedType1, "ShortYear", each Text.End(Text.From([Year]), 2), type text),
    AddFY = Table.AddColumn(InsertShortYear, "FY", each "FY"&(if [MonthOfYear]>=FYStartMonth then Text.From(Number.From([ShortYear])+1) else [ShortYear]))
in
    AddFY